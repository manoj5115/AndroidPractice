package com.manz.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.manz.db.Words;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORDS".
*/
public class WordsDao extends AbstractDao<Words, Long> {

    public static final String TABLENAME = "WORDS";

    /**
     * Properties of entity Words.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Word = new Property(1, String.class, "word", false, "WORD");
        public final static Property Variant = new Property(2, Integer.class, "variant", false, "VARIANT");
        public final static Property Meaning = new Property(3, String.class, "meaning", false, "MEANING");
        public final static Property Ratio = new Property(4, Double.class, "ratio", false, "RATIO");
    };


    public WordsDao(DaoConfig config) {
        super(config);
    }
    
    public WordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORDS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WORD\" TEXT," + // 1: word
                "\"VARIANT\" INTEGER," + // 2: variant
                "\"MEANING\" TEXT," + // 3: meaning
                "\"RATIO\" REAL);"); // 4: ratio
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORDS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Words entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(2, word);
        }
 
        Integer variant = entity.getVariant();
        if (variant != null) {
            stmt.bindLong(3, variant);
        }
 
        String meaning = entity.getMeaning();
        if (meaning != null) {
            stmt.bindString(4, meaning);
        }
 
        Double ratio = entity.getRatio();
        if (ratio != null) {
            stmt.bindDouble(5, ratio);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Words readEntity(Cursor cursor, int offset) {
        Words entity = new Words( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // word
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // variant
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // meaning
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4) // ratio
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Words entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWord(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVariant(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMeaning(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRatio(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Words entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Words entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
